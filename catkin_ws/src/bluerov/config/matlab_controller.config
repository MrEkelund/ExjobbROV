 #!/usr/bin/env python
import roslib; roslib.load_manifest("bluerov")
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Controller list
controller_enum = gen.enum([
    gen.const("Dec",             int_t, 0, ""),
    gen.const("Rate",                int_t, 1, ""),
    gen.const("Attitude",           int_t, 2, ""),
], "An enum for controllers")

# Add Controller
#gen.add("controller", int_t, 0, "Choose which controller to use", 0, 0, 1, edit_method=controller_enum)
gen.add("enable_thruster1",bool_t,0,"",True)
gen.add("enable_thruster2",bool_t,0,"",True)
gen.add("enable_thruster3",bool_t,0,"",True)
gen.add("enable_thruster4",bool_t,0,"",True)
gen.add("enable_thruster5",bool_t,0,"",True)
gen.add("enable_thruster6",bool_t,0,"",True)

controllers_group = gen.add_group("controllers", state=False)
controllers_group.add("controller", int_t, 0, "Choose which controller to use", 0, 0, 2, edit_method=controller_enum)

rate_group=controllers.add_group("Rate controller", state=False)
rate_group.add("kp_p",int_t, 0, "Kp for p",0,0,20)
rate_group.add("kp_q",int_t, 0, "Kp for q",0,0,20)
rate_group.add("kp_r",int_t, 0, "Kp for r",0,0,20)

rate_group.add("ki_p",int_t, 0, "Ki for p",0,0,20)
rate_group.add("ki_q",int_t, 0, "Ki for q",0,0,20)
rate_group.add("ki_r",int_t, 0, "Ki for r",0,0,20)


attitude_group=controllers.add_group("Attitude controller", state=False)
attitude_group.add("kp_roll",int_t, 0, "Kp for roll",0,0,20)
attitude_group.add("kp_pitch",int_t, 0, "Kp for pitch",0,0,20)
attitude_group.add("kp_yaw",int_t, 0, "Kp for yaw",0,0,20)

attitude_group.add("ki_roll",int_t, 0, "Ki for roll",0,0,20)
attitude_group.add("ki_pitch",int_t, 0, "Ki for pitch",0,0,20)
attitude_group.add("ki_yaw",int_t, 0, "Ki for yaw",0,0,20)

attitude_group.add("kd_roll",int_t, 0, "Kd for roll",0,0,20)
attitude_group.add("kd_pitch",int_t, 0, "Kd for pitch",0,0,20)
attitude_group.add("kd_yaw",int_t, 0, "Kd for yaw",0,0,20)


# Options for telegraph generator
onoff_enum = gen.enum([ gen.const("ON",      int_t, 0, "Turn on test"),
                        gen.const("OFF",     int_t, 1, "Turn off test")],
                        "An enum to set on/off for tests")

lock_enum = gen.enum([ gen.const("Un_Lock",      int_t, 0, "Un-Lock thruster 1 and 2"),
                        gen.const("Lock",     int_t, 1, "Lock thruster 1 and 2")],
                        "An enum to lock thruster 1 and 2 to same telegraph source")

telegraph_group = gen.add_group("telegraph_signal", type="collapse", state=False)
telegraph_group.add("test", int_t, 0, "Set the test signal on/off", 1, 0, 1, edit_method=onoff_enum)
telegraph_group.add("lock_t1_t2",int_t , 0, "Lock thruster 1 and 2",0, 0, 1, edit_method=lock_enum)
thruster1_group = telegraph_group.add_group("Thruster1", type="collapse", state=False)
thruster1_group.add("switch_factor1", int_t, 0 , "Chance to switch", 50, 0, 100)
thruster1_group.add("max_scale1", double_t, 0 , "Max scale", 1, 0, 1)
thruster1_group.add("min_scale1", double_t, 0 , "Min scale", 1, 0, 1)

thruster2_group = telegraph_group.add_group("Thruster2", type="collapse", state=False)
thruster2_group.add("switch_factor2", int_t, 0 , "Chance to switch", 50, 0, 100)
thruster2_group.add("max_scale2", double_t, 0 , "Max scale", 1, 0, 1)
thruster2_group.add("min_scale2", double_t, 0 , "Min scale", 1, 0, 1)

thruster3_group = telegraph_group.add_group("Thruster3", type="collapse", state=False)
thruster3_group.add("switch_factor3", int_t, 0 , "Chance to switch", 50, 0, 100)
thruster3_group.add("max_scale3", double_t, 0 , "Max scale", 1, 0, 1)
thruster3_group.add("min_scale3", double_t, 0 , "Min scale", 1, 0, 1)

thruster4_group = telegraph_group.add_group("Thruster4", type="collapse", state=False)
thruster4_group.add("switch_factor4", int_t, 0 , "Chance to switch", 50, 0, 100)
thruster4_group.add("max_scale4", double_t, 0 , "Max scale", 1, 0, 1)
thruster4_group.add("min_scale4", double_t, 0 , "Min scale", 1, 0, 1)

thruster5_group = telegraph_group.add_group("Thruster5", type="collapse", state=False)
thruster5_group.add("switch_factor5", int_t, 0 , "Chance to switch", 50, 0, 100)
thruster5_group.add("max_scale5", double_t, 0 , "Max scale", 1, 0, 1)
thruster5_group.add("min_scale5", double_t, 0 , "Min scale", 1, 0, 1)

thruster6_group = telegraph_group.add_group("Thruster6", type="collapse", state=False)
thruster6_group.add("switch_factor6", int_t, 0 , "Chance to switch", 50, 0, 100)
thruster6_group.add("max_scale6", double_t, 0 , "Max scale", 1, 0, 1)
thruster6_group.add("min_scale6", double_t, 0 , "Min scale", 1, 0, 1)

# generate the config headers
exit(gen.generate("bluerov", "matlab_controller", "matlab_controller"))
