#!/usr/bin/env python
import roslib; roslib.load_manifest("bluerov")
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Controller list
controller_enum = gen.enum([
    gen.const("Manual",             int_t, 0, ""),
    gen.const("LQ",                 int_t, 1, ""),
], "An enum for controllers")

# Add Controller
#gen.add("controller", int_t, 0, "Choose which controller to use", 0, 0, 1, edit_method=controller_enum)
gen.add("enable_thruster1",bool_t,0,"",True)
gen.add("enable_thruster2",bool_t,0,"",True)
gen.add("enable_thruster3",bool_t,0,"",True)
gen.add("enable_thruster4",bool_t,0,"",True)
gen.add("enable_thruster5",bool_t,0,"",True)
gen.add("enable_thruster6",bool_t,0,"",True)

controllers_group = gen.add_group("controllers", state=False)
controllers_group.add("controller", int_t, 0, "Choose which controller to use", 0, 0, 1, edit_method=controller_enum)

pid_group = controllers_group.add_group("Pid_parameters",type="collapse", state=True)
pid_group_angular = pid_group.add_group("Pid_angular",type="collapse", state=True)

pid_group_angular_x = pid_group_angular.add_group("Pid_angular_x",type="collapse", state=True)
pid_group_angular_x.add("P_angular_vel_x",   double_t, 0, "", 0.5, 0.1, 20)
pid_group_angular_x.add("I_angular_vel_x",   double_t, 0, "", 0.5, 0.1, 20)
pid_group_angular_x.add("D_angular_vel_x",   double_t, 0, "", 0.5, 0.1, 20)
pid_group_angular_x.add("N_angular_vel_x",   double_t, 0, "", 1.0, 1.0, 100)

pid_group_angular_y = pid_group_angular.add_group("Pid_angular_y",type="collapse", state=True)
pid_group_angular_y.add("P_angular_vel_y",   double_t, 0, "", 0.5, 0.1, 20)
pid_group_angular_y.add("I_angular_vel_y",   double_t, 0, "", 0.5, 0.1, 20)
pid_group_angular_y.add("D_angular_vel_y",   double_t, 0, "", 0.5, 0.1, 20)
pid_group_angular_y.add("N_angular_vel_y",   double_t, 0, "", 1.0, 1.0, 100)

pid_group_angular_z = pid_group_angular.add_group("Pid_angular_z",type="collapse", state=True)
pid_group_angular_z.add("P_angular_vel_z",   double_t, 0, "", 0.5, 0.1, 20)
pid_group_angular_z.add("I_angular_vel_z",   double_t, 0, "", 0.5, 0.1, 20)
pid_group_angular_z.add("D_angular_vel_z",   double_t, 0, "", 0.5, 0.1, 20)
pid_group_angular_z.add("N_angular_vel_z",   double_t, 0, "", 1.0, 1.0, 100)

pid_group_linear = pid_group.add_group("Pid_linear",type="collapse", state=True)

pid_group_linear_x = pid_group_linear.add_group("Pid_linear_x",type="collapse", state=True)
pid_group_linear_x.add("P_vel_x",   double_t, 0, "", 0.5, 0.1, 20)
pid_group_linear_x.add("I_vel_x",   double_t, 0, "", 0.5, 0.1, 20)
pid_group_linear_x.add("D_vel_x",   double_t, 0, "", 0.5, 0.1, 20)
pid_group_linear_x.add("N_vel_x",   double_t, 0, "", 1.0, 1.0, 100)

pid_group_linear_y = pid_group_linear.add_group("Pid_linear_y",type="collapse", state=True)
pid_group_linear_y.add("P_vel_y",   double_t, 0, "", 0.5, 0.1, 20)
pid_group_linear_y.add("I_vel_y",   double_t, 0, "", 0.5, 0.1, 20)
pid_group_linear_y.add("D_vel_y",   double_t, 0, "", 0.5, 0.1, 20)
pid_group_linear_y.add("N_vel_y",   double_t, 0, "", 1.0, 1.0, 100)

pid_group_linear_z = pid_group_linear.add_group("Pid_linear_z",type="collapse", state=True)
pid_group_linear_z.add("P_vel_z",   double_t, 0, "", 0.5, 0.1, 20)
pid_group_linear_z.add("I_vel_z",   double_t, 0, "", 0.5, 0.1, 20)
pid_group_linear_z.add("D_vel_z",   double_t, 0, "", 0.5, 0.1, 20)
pid_group_linear_z.add("N_vel_z",   double_t, 0, "", 1.0, 1.0, 100)

linear_max = 10
decoupler_group = controllers_group.add_group("Decoupler settings",type="collapse", state=True)
decoupler_group.add("front_strafe_decouple",   double_t, 0, "scales power of front vertical thrusters during strafe movement", 0.5, -1, 1)
decoupler_group.add("front_forward_decouple",   double_t, 0, "scales power of front vertical thrusters during forward movement", -0.13, -1, 1)
decoupler_group.add("front_pitch_bias",   double_t, 0, "scales power of front vertical thrusters during pitch", 0.5, 0, 1)
decoupler_group.add("front_vertical_bias",   double_t, 0, "scales power of front vertical thrusters during ascent/descent", 0.75, 0, 1)
decoupler_group.add("buoyancy_control",   double_t, 0, "applies a constant vertical force in m/s", 0, -linear_max, linear_max)

acc_int_group = controllers_group.add_group("Acc integration settings", type="collapse", state=True)
acc_int_group.add("alpha", double_t, 0, "y[n] + alpha*y[n-1] = x[n]", 0, 0, 10)
acc_int_group.add("enable_integration", bool_t, 0, "", False)

scaling_linear_max = 10  # m/s
scaling_angular_max = 1800  # degress/s (this is 5 rotations per second)
scaling_group = controllers_group.add_group("Xbox controller scaling settings", type="collapse", state=True)
scaling_group.add("velocity_x_scaling", double_t, 0, "Linear x velocity scaling", 1, 0, scaling_linear_max)
scaling_group.add("velocity_y_scaling", double_t, 0, "Linear y velocity scaling", 1, 0, scaling_linear_max)
scaling_group.add("velocity_z_scaling", double_t, 0, "Linear z velocity scaling", 1, 0, scaling_linear_max)
scaling_group.add("angular_x_scaling", double_t, 0, "Angular x velocity scaling", 30, 0, scaling_angular_max)
scaling_group.add("angular_y_scaling", double_t, 0, "Angular y velocity scaling", 30, 0, scaling_angular_max)
scaling_group.add("angular_z_scaling", double_t, 0, "Angular z velocity scaling", 30, 0, scaling_angular_max)


# Options for telegraph generator
onoff_enum = gen.enum([ gen.const("ON",      int_t, 0, "Turn on test"),
                        gen.const("OFF",     int_t, 1, "Turn off test")],
                        "An enum to set on/off for tests")

telegraph_group = gen.add_group("telegraph_signal", type="collapse", state=False)
telegraph_group.add("test", int_t, 0, "Set the test signal on/off", 1, 0, 1, edit_method=onoff_enum)

thruster1_group = telegraph_group.add_group("Thruster1", type="collapse", state=True)
thruster1_group.add("switch_factor1", int_t, 0 , "Chance to switch", 50, 0, 100)
thruster1_group.add("max_scale1", double_t, 0 , "Max scale", 1, 0, 1)
thruster1_group.add("min_scale1", double_t, 0 , "Min scale", 1, 0, 1)

thruster2_group = telegraph_group.add_group("Thruster2", type="collapse", state=True)
thruster2_group.add("switch_factor2", int_t, 0 , "Chance to switch", 50, 0, 100)
thruster2_group.add("max_scale2", double_t, 0 , "Max scale", 1, 0, 1)
thruster2_group.add("min_scale2", double_t, 0 , "Min scale", 1, 0, 1)

thruster3_group = telegraph_group.add_group("Thruster3", type="collapse", state=True)
thruster3_group.add("switch_factor3", int_t, 0 , "Chance to switch", 50, 0, 100)
thruster3_group.add("max_scale3", double_t, 0 , "Max scale", 1, 0, 1)
thruster3_group.add("min_scale3", double_t, 0 , "Min scale", 1, 0, 1)

thruster4_group = telegraph_group.add_group("Thruster4", type="collapse", state=True)
thruster4_group.add("switch_factor4", int_t, 0 , "Chance to switch", 50, 0, 100)
thruster4_group.add("max_scale4", double_t, 0 , "Max scale", 1, 0, 1)
thruster4_group.add("min_scale4", double_t, 0 , "Min scale", 1, 0, 1)

thruster5_group = telegraph_group.add_group("Thruster5", type="collapse", state=True)
thruster5_group.add("switch_factor5", int_t, 0 , "Chance to switch", 50, 0, 100)
thruster5_group.add("max_scale5", double_t, 0 , "Max scale", 1, 0, 1)
thruster5_group.add("min_scale5", double_t, 0 , "Min scale", 1, 0, 1)

thruster6_group = telegraph_group.add_group("Thruster6", type="collapse", state=True)
thruster6_group.add("switch_factor6", int_t, 0 , "Chance to switch", 50, 0, 100)
thruster6_group.add("max_scale6", double_t, 0 , "Max scale", 1, 0, 1)
thruster6_group.add("min_scale6", double_t, 0 , "Min scale", 1, 0, 1)

# generate the config headers
exit(gen.generate("bluerov", "matlab_controller", "matlab_controller"))
