#!/usr/bin/env python
import roslib; roslib.load_manifest("bluerov")
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Controller list
controller_enum = gen.enum([
    gen.const("Manual",             int_t, 0, ""),
    gen.const("LQ",                 int_t, 1, ""),
], "An enum for controllers")

# Add Controller
#gen.add("controller", int_t, 0, "Choose which controller to use", 0, 0, 1, edit_method=controller_enum)
controllers_group = gen.add_group("controllers", state=True)
controllers_group.add("controller", int_t, 0, "Choose which controller to use", 0, 0, 1, edit_method=controller_enum)

pid_group = controllers_group.add_group("Pid_parameters", type="collapse", state=True)
#pid_group = gen.add_group("Pid_parameters", type="collapse", state=True)
pid_group.add("P_angular_vel_x",   double_t, 0, "", 0.5, 0.1, 20)
pid_group.add("I_angular_vel_x",   double_t, 0, "", 0.5, 0.1, 20)
pid_group.add("D_angular_vel_x",   double_t, 0, "", 0.5, 0.1, 20)
pid_group.add("N_angular_vel_x",   double_t, 0, "", 1.0, 1.0, 100)

pid_group.add("P_angular_vel_y",   double_t, 0, "", 0.5, 0.1, 20)
pid_group.add("I_angular_vel_y",   double_t, 0, "", 0.5, 0.1, 20)
pid_group.add("D_angular_vel_y",   double_t, 0, "", 0.5, 0.1, 20)
pid_group.add("N_angular_vel_y",   double_t, 0, "", 1.0, 1.0, 100)

pid_group.add("P_angular_vel_z",   double_t, 0, "", 0.5, 0.1, 20)
pid_group.add("I_angular_vel_z",   double_t, 0, "", 0.5, 0.1, 20)
pid_group.add("D_angular_vel_z",   double_t, 0, "", 0.5, 0.1, 20)
pid_group.add("N_angular_vel_z",   double_t, 0, "", 1.0, 1.0, 100)

pid_group.add("P_vel_x",   double_t, 0, "", 0.5, 0.1, 20)
pid_group.add("I_vel_x",   double_t, 0, "", 0.5, 0.1, 20)
pid_group.add("D_vel_x",   double_t, 0, "", 0.5, 0.1, 20)
pid_group.add("N_vel_x",   double_t, 0, "", 1.0, 1.0, 100)

pid_group.add("P_vel_y",   double_t, 0, "", 0.5, 0.1, 20)
pid_group.add("I_vel_y",   double_t, 0, "", 0.5, 0.1, 20)
pid_group.add("D_vel_y",   double_t, 0, "", 0.5, 0.1, 20)
pid_group.add("N_vel_y",   double_t, 0, "", 1.0, 1.0, 100)

pid_group.add("P_vel_z",   double_t, 0, "", 0.5, 0.1, 20)
pid_group.add("I_vel_z",   double_t, 0, "", 0.5, 0.1, 20)
pid_group.add("D_vel_z",   double_t, 0, "", 0.5, 0.1, 20)
pid_group.add("N_vel_z",   double_t, 0, "", 1.0, 1.0, 100)

linear_max = 10
decoupler_group = gen.add_group("Decoupler settings", state=True)
decoupler_group.add("front_strafe_decouple",   double_t, 0, "scales power of front vertical thrusters during strafe movement", 0.5, -1, 1)
decoupler_group.add("front_forward_decouple",   double_t, 0, "scales power of front vertical thrusters during forward movement", -0.13, -1, 1)
decoupler_group.add("front_pitch_bias",   double_t, 0, "scales power of front vertical thrusters during pitch", 0.5, 0, 1)
decoupler_group.add("front_vertical_bias",   double_t, 0, "scales power of front vertical thrusters during ascent/descent", 0.75, 0, 1)
decoupler_group.add("buoyancy_control",   double_t, 0, "applies a constant vertical force in m/s", 0, -linear_max, linear_max)

acc_int_group = gen.add_group("acc integration", type="collapse", state=True)
acc_int_group.add("alpha", double_t, 0, "y[n] + alpha*y[n-1] = x[n]", 0, 0, 10)
acc_int_group.add("enable_integration", bool_t, 0, "", False)


telegraph_group = gen.add_group("telegraph signal", type="collapse", state=True)
telegraph_group.add("switch_factor", int_t, 0 , "chance to switch", 50, 0, 100)

sensor_fusion_group = gen.add_group("Sensor fusion", type="collapse", state=True)
sensor_fusion_group.add("eps_mag", double_t, 0, "maximum difference between measured magnetic field and earths magnetic field [tesla]",100,0,1000)
sensor_fusion_group.add("eps_acc", double_t, 0, "maximum difference between measured acceleration and g [m/s^2]",2,0,10)
sensor_fusion_group.add("x_offset", double_t, 0, "offset of rear pressure sensor in negative x direction [meters]",0.10,0,1)
sensor_fusion_group.add("Sample_time", double_t, 0, "sample time in seconds for motion model",1,0.000001,30)

covariance_group = sensor_fusion_group.add_group("Measurement covariance", type="collapse", state = True)

covariance_group.add("r_acc_11", double_t, 0, "covariance for acceleration measurement in x",1, 0.001,10000)
covariance_group.add("r_acc_22", double_t, 0, "covariance for acceleration measurement in x",1, 0.001,10000)
covariance_group.add("r_acc_33", double_t, 0, "covariance for acceleration measurement in x",1, 0.001,10000)


covariance_group.add("r_mag_11", double_t, 0, "covariance for magnetometer measurement in x",1, 0.001,10000)
covariance_group.add("r_mag_22", double_t, 0, "covariance for magnetometer measurement in x",1, 0.001,10000)
covariance_group.add("r_mag_33", double_t, 0, "covariance for magnetometer measurement in x",1, 0.001,10000)

covariance_group.add("r_pressure", double_t, 0, "covariance for pressure measurement",1, 0.001,10000)
# generate the config headers
exit(gen.generate("bluerov", "matlab_controller", "matlab_controller"))
