#!/usr/bin/env python

PACKAGE = "sensorfusion"
from dynamic_reconfigure.parameter_generator_catkin import *
import roslib;
roslib.load_manifest(PACKAGE)

gen = ParameterGenerator()
# Options for the sensorfusion module and its sub-modules
time_update_group = gen.add_group("Sensor fusion settings", type="collapse", state=True)
time_update_group.add("enable_time_update",bool_t, 0, "", True)
time_update_group.add("q_00", double_t, 0, "diagonal of Q matrix", 100.0, 0.0001, 1000)
time_update_group.add("q_11", double_t, 0, "diagonal of Q matrix", 100.0, 0.0001, 1000)
time_update_group.add("q_22", double_t, 0, "diagonal of Q matrix", 100.0, 0.0001, 1000)
time_update_group.add("q_33", double_t, 0, "diagonal of Q matrix", 100.0, 0.0001, 1000)

initial_group = gen.add_group("initial settings for Kalman filter", type="collapse", state=True)
initial_group.add("initial_q0", double_t, 0, "Initial value for quaternion 0", 1, 0, 1)
initial_group.add("initial_q1", double_t, 0, "Initial value for quaternion 1", 0, 0, 1)
initial_group.add("initial_q2", double_t, 0, "Initial value for quaternion 2", 0, 0, 1)
initial_group.add("initial_q3", double_t, 0, "Initial value for quaternion 3", 0, 0, 1)
initial_group.add("initial_d", double_t, 0, "Initial value for depth", 0, 0, 10)

initial_group.add("p0_00", double_t, 0, "Diagonal elements of P0 matrix", 1000,0.1,100000)
initial_group.add("p0_11", double_t, 0, "Diagonal elements of P0 matrix", 1000,0.1,100000)
initial_group.add("p0_22", double_t, 0, "Diagonal elements of P0 matrix", 1000,0.1,100000)
initial_group.add("p0_33", double_t, 0, "Diagonal elements of P0 matrix", 1000,0.1,100000)
initial_group.add("p0_44", double_t, 0, "Diagonal elements of P0 matrix", 1000,0.1,100000)

param_group = gen.add_group("Physical parameters", type="collapse", state=True)
param_group.add("g", double_t, 0, "Gravitational constant",9.82,8,11)
param_group.add("x_offset", double_t, 0, "offset of rear pressure sensor in negative x direction [meters]", 0.10, 0, 1)
param_group.add("rho", double_t, 0,"Density of water in kg/m3",1000,900,1100)
param_group.add("mag_n",double_t, 0, "reference magnetic field in north direction [uTesla]", 300, 10, 1000)
param_group.add("mag_e",double_t, 0, "reference magnetic field in east direction [uTesla]", 300, 10, 1000)
param_group.add("mag_d",double_t, 0, "reference magnetic field in down direction [uTesla]", 300, 10, 1000)



acc_group = gen.add_group("Accceleration settings",type="collapse", state=True)
acc_group.add("enable_acceleration_update", bool_t, 0,"",True)
acc_group.add("eps_acc", double_t, 0, "maximum difference between measured acceleration and g [m/s^2]",2, 0, 10)
acc_group.add("r_acc_00", double_t, 0, "covariance for acceleration measurement in x",10, 0.001, 100)
acc_group.add("r_acc_11", double_t, 0, "covariance for acceleration measurement in x",10, 0.001, 100)
acc_group.add("r_acc_22", double_t, 0, "covariance for acceleration measurement in x",10, 0.001, 100)

mag_group = gen.add_group("mag_options",type="collapse", state=True)
mag_group.add("enable_magnetometer_update", bool_t, 0,"",True)
mag_group.add("eps_mag", double_t, 0, "maximum difference between measured magnetic field and earths magnetic field [uTesla]",100,0,1000)
mag_group.add("r_mag_00", double_t, 0, "covariance for magnetometer measurement in x",30, 0.001, 300)
mag_group.add("r_mag_11", double_t, 0, "covariance for magnetometer measurement in x",30, 0.001, 300)
mag_group.add("r_mag_22", double_t, 0, "covariance for magnetometer measurement in x",30, 0.001, 300)

pressure_group = gen.add_group("Pressure_options",type="collapse", state=True)
pressure_group.add("enable_pressure_update", bool_t, 0,"",True)
pressure_group.add("r_pressure", double_t, 0, "covariance for pressure measurement",10, 0.001, 100)

# generate the config headers
exit(gen.generate("sensorfusion","ekf","ekf"))
