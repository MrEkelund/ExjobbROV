classdef States < robotics.ros.Message
    %States MATLAB implementation of matlab_messages/States
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2016 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'matlab_messages/States' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'ad0707f7628cf52ea423e2e29a95fdbb' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Q0
        Q1
        Q2
        Q3
        GyroBiasX
        GyroBiasY
        GyroBiasZ
        AccBiasX
        AccBiasY
        AccBiasZ
        Depth
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AccBiasX', 'AccBiasY', 'AccBiasZ', 'Depth', 'GyroBiasX', 'GyroBiasY', 'GyroBiasZ', 'Q0', 'Q1', 'Q2', 'Q3'} % List of non-constant message properties
        ROSPropertyList = {'AccBiasX', 'AccBiasY', 'AccBiasZ', 'Depth', 'GyroBiasX', 'GyroBiasY', 'GyroBiasZ', 'Q0', 'Q1', 'Q2', 'Q3'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = States(msg)
            %States Construct the message object States
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function q0 = get.Q0(obj)
            %get.Q0 Get the value for property Q0
            q0 = double(obj.JavaMessage.getQ0);
        end
        
        function set.Q0(obj, q0)
            %set.Q0 Set the value for property Q0
            validateattributes(q0, {'numeric'}, {'nonempty', 'scalar'}, 'States', 'q0');
            
            obj.JavaMessage.setQ0(q0);
        end
        
        function q1 = get.Q1(obj)
            %get.Q1 Get the value for property Q1
            q1 = double(obj.JavaMessage.getQ1);
        end
        
        function set.Q1(obj, q1)
            %set.Q1 Set the value for property Q1
            validateattributes(q1, {'numeric'}, {'nonempty', 'scalar'}, 'States', 'q1');
            
            obj.JavaMessage.setQ1(q1);
        end
        
        function q2 = get.Q2(obj)
            %get.Q2 Get the value for property Q2
            q2 = double(obj.JavaMessage.getQ2);
        end
        
        function set.Q2(obj, q2)
            %set.Q2 Set the value for property Q2
            validateattributes(q2, {'numeric'}, {'nonempty', 'scalar'}, 'States', 'q2');
            
            obj.JavaMessage.setQ2(q2);
        end
        
        function q3 = get.Q3(obj)
            %get.Q3 Get the value for property Q3
            q3 = double(obj.JavaMessage.getQ3);
        end
        
        function set.Q3(obj, q3)
            %set.Q3 Set the value for property Q3
            validateattributes(q3, {'numeric'}, {'nonempty', 'scalar'}, 'States', 'q3');
            
            obj.JavaMessage.setQ3(q3);
        end
        
        function gyrobiasx = get.GyroBiasX(obj)
            %get.GyroBiasX Get the value for property GyroBiasX
            gyrobiasx = double(obj.JavaMessage.getGyroBiasX);
        end
        
        function set.GyroBiasX(obj, gyrobiasx)
            %set.GyroBiasX Set the value for property GyroBiasX
            validateattributes(gyrobiasx, {'numeric'}, {'nonempty', 'scalar'}, 'States', 'gyrobiasx');
            
            obj.JavaMessage.setGyroBiasX(gyrobiasx);
        end
        
        function gyrobiasy = get.GyroBiasY(obj)
            %get.GyroBiasY Get the value for property GyroBiasY
            gyrobiasy = double(obj.JavaMessage.getGyroBiasY);
        end
        
        function set.GyroBiasY(obj, gyrobiasy)
            %set.GyroBiasY Set the value for property GyroBiasY
            validateattributes(gyrobiasy, {'numeric'}, {'nonempty', 'scalar'}, 'States', 'gyrobiasy');
            
            obj.JavaMessage.setGyroBiasY(gyrobiasy);
        end
        
        function gyrobiasz = get.GyroBiasZ(obj)
            %get.GyroBiasZ Get the value for property GyroBiasZ
            gyrobiasz = double(obj.JavaMessage.getGyroBiasZ);
        end
        
        function set.GyroBiasZ(obj, gyrobiasz)
            %set.GyroBiasZ Set the value for property GyroBiasZ
            validateattributes(gyrobiasz, {'numeric'}, {'nonempty', 'scalar'}, 'States', 'gyrobiasz');
            
            obj.JavaMessage.setGyroBiasZ(gyrobiasz);
        end
        
        function accbiasx = get.AccBiasX(obj)
            %get.AccBiasX Get the value for property AccBiasX
            accbiasx = double(obj.JavaMessage.getAccBiasX);
        end
        
        function set.AccBiasX(obj, accbiasx)
            %set.AccBiasX Set the value for property AccBiasX
            validateattributes(accbiasx, {'numeric'}, {'nonempty', 'scalar'}, 'States', 'accbiasx');
            
            obj.JavaMessage.setAccBiasX(accbiasx);
        end
        
        function accbiasy = get.AccBiasY(obj)
            %get.AccBiasY Get the value for property AccBiasY
            accbiasy = double(obj.JavaMessage.getAccBiasY);
        end
        
        function set.AccBiasY(obj, accbiasy)
            %set.AccBiasY Set the value for property AccBiasY
            validateattributes(accbiasy, {'numeric'}, {'nonempty', 'scalar'}, 'States', 'accbiasy');
            
            obj.JavaMessage.setAccBiasY(accbiasy);
        end
        
        function accbiasz = get.AccBiasZ(obj)
            %get.AccBiasZ Get the value for property AccBiasZ
            accbiasz = double(obj.JavaMessage.getAccBiasZ);
        end
        
        function set.AccBiasZ(obj, accbiasz)
            %set.AccBiasZ Set the value for property AccBiasZ
            validateattributes(accbiasz, {'numeric'}, {'nonempty', 'scalar'}, 'States', 'accbiasz');
            
            obj.JavaMessage.setAccBiasZ(accbiasz);
        end
        
        function depth = get.Depth(obj)
            %get.Depth Get the value for property Depth
            depth = double(obj.JavaMessage.getDepth);
        end
        
        function set.Depth(obj, depth)
            %set.Depth Set the value for property Depth
            validateattributes(depth, {'numeric'}, {'nonempty', 'scalar'}, 'States', 'depth');
            
            obj.JavaMessage.setDepth(depth);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Q0 = obj.Q0;
            cpObj.Q1 = obj.Q1;
            cpObj.Q2 = obj.Q2;
            cpObj.Q3 = obj.Q3;
            cpObj.GyroBiasX = obj.GyroBiasX;
            cpObj.GyroBiasY = obj.GyroBiasY;
            cpObj.GyroBiasZ = obj.GyroBiasZ;
            cpObj.AccBiasX = obj.AccBiasX;
            cpObj.AccBiasY = obj.AccBiasY;
            cpObj.AccBiasZ = obj.AccBiasZ;
            cpObj.Depth = obj.Depth;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Q0 = strObj.Q0;
            obj.Q1 = strObj.Q1;
            obj.Q2 = strObj.Q2;
            obj.Q3 = strObj.Q3;
            obj.GyroBiasX = strObj.GyroBiasX;
            obj.GyroBiasY = strObj.GyroBiasY;
            obj.GyroBiasZ = strObj.GyroBiasZ;
            obj.AccBiasX = strObj.AccBiasX;
            obj.AccBiasY = strObj.AccBiasY;
            obj.AccBiasZ = strObj.AccBiasZ;
            obj.Depth = strObj.Depth;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Q0 = obj.Q0;
            strObj.Q1 = obj.Q1;
            strObj.Q2 = obj.Q2;
            strObj.Q3 = obj.Q3;
            strObj.GyroBiasX = obj.GyroBiasX;
            strObj.GyroBiasY = obj.GyroBiasY;
            strObj.GyroBiasZ = obj.GyroBiasZ;
            strObj.AccBiasX = obj.AccBiasX;
            strObj.AccBiasY = obj.AccBiasY;
            strObj.AccBiasZ = obj.AccBiasZ;
            strObj.Depth = obj.Depth;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.matlab_messages.States.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.matlab_messages.States;
            obj.reload(strObj);
        end
    end
end
