# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bluerov/Health.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Health(genpy.Message):
  _md5sum = "3759c570a6250d1aa85350125e6ecdda"
  _type = "bluerov/Health"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header    header
float32   cpu_used    # percent cpu utilization
float32   mem_used    # percent memory used
float32   v_batt      # volts
float32   i_batt      # amps
float32   t_internal  # degrees C
float32   p_internal  # Pa
bool      sw_1        # on/off
bool      sw_2        # on/off

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','cpu_used','mem_used','v_batt','i_batt','t_internal','p_internal','sw_1','sw_2']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32','float32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,cpu_used,mem_used,v_batt,i_batt,t_internal,p_internal,sw_1,sw_2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Health, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.cpu_used is None:
        self.cpu_used = 0.
      if self.mem_used is None:
        self.mem_used = 0.
      if self.v_batt is None:
        self.v_batt = 0.
      if self.i_batt is None:
        self.i_batt = 0.
      if self.t_internal is None:
        self.t_internal = 0.
      if self.p_internal is None:
        self.p_internal = 0.
      if self.sw_1 is None:
        self.sw_1 = False
      if self.sw_2 is None:
        self.sw_2 = False
    else:
      self.header = std_msgs.msg.Header()
      self.cpu_used = 0.
      self.mem_used = 0.
      self.v_batt = 0.
      self.i_batt = 0.
      self.t_internal = 0.
      self.p_internal = 0.
      self.sw_1 = False
      self.sw_2 = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6f2B.pack(_x.cpu_used, _x.mem_used, _x.v_batt, _x.i_batt, _x.t_internal, _x.p_internal, _x.sw_1, _x.sw_2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.cpu_used, _x.mem_used, _x.v_batt, _x.i_batt, _x.t_internal, _x.p_internal, _x.sw_1, _x.sw_2,) = _struct_6f2B.unpack(str[start:end])
      self.sw_1 = bool(self.sw_1)
      self.sw_2 = bool(self.sw_2)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6f2B.pack(_x.cpu_used, _x.mem_used, _x.v_batt, _x.i_batt, _x.t_internal, _x.p_internal, _x.sw_1, _x.sw_2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.cpu_used, _x.mem_used, _x.v_batt, _x.i_batt, _x.t_internal, _x.p_internal, _x.sw_1, _x.sw_2,) = _struct_6f2B.unpack(str[start:end])
      self.sw_1 = bool(self.sw_1)
      self.sw_2 = bool(self.sw_2)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_6f2B = struct.Struct("<6f2B")
