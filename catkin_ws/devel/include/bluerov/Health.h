// Generated by gencpp from file bluerov/Health.msg
// DO NOT EDIT!


#ifndef BLUEROV_MESSAGE_HEALTH_H
#define BLUEROV_MESSAGE_HEALTH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace bluerov
{
template <class ContainerAllocator>
struct Health_
{
  typedef Health_<ContainerAllocator> Type;

  Health_()
    : header()
    , cpu_used(0.0)
    , mem_used(0.0)
    , v_batt(0.0)
    , i_batt(0.0)
    , t_internal(0.0)
    , p_internal(0.0)
    , sw_1(false)
    , sw_2(false)  {
    }
  Health_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , cpu_used(0.0)
    , mem_used(0.0)
    , v_batt(0.0)
    , i_batt(0.0)
    , t_internal(0.0)
    , p_internal(0.0)
    , sw_1(false)
    , sw_2(false)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _cpu_used_type;
  _cpu_used_type cpu_used;

   typedef float _mem_used_type;
  _mem_used_type mem_used;

   typedef float _v_batt_type;
  _v_batt_type v_batt;

   typedef float _i_batt_type;
  _i_batt_type i_batt;

   typedef float _t_internal_type;
  _t_internal_type t_internal;

   typedef float _p_internal_type;
  _p_internal_type p_internal;

   typedef uint8_t _sw_1_type;
  _sw_1_type sw_1;

   typedef uint8_t _sw_2_type;
  _sw_2_type sw_2;




  typedef boost::shared_ptr< ::bluerov::Health_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bluerov::Health_<ContainerAllocator> const> ConstPtr;

}; // struct Health_

typedef ::bluerov::Health_<std::allocator<void> > Health;

typedef boost::shared_ptr< ::bluerov::Health > HealthPtr;
typedef boost::shared_ptr< ::bluerov::Health const> HealthConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bluerov::Health_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bluerov::Health_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace bluerov

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'bluerov': ['/home/erik/Documents/exjobb/catkin_ws/src/bluerov/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::bluerov::Health_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bluerov::Health_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bluerov::Health_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bluerov::Health_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bluerov::Health_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bluerov::Health_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bluerov::Health_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3759c570a6250d1aa85350125e6ecdda";
  }

  static const char* value(const ::bluerov::Health_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3759c570a6250d1aULL;
  static const uint64_t static_value2 = 0xa85350125e6ecddaULL;
};

template<class ContainerAllocator>
struct DataType< ::bluerov::Health_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bluerov/Health";
  }

  static const char* value(const ::bluerov::Health_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bluerov::Health_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header    header\n\
float32   cpu_used    # percent cpu utilization\n\
float32   mem_used    # percent memory used\n\
float32   v_batt      # volts\n\
float32   i_batt      # amps\n\
float32   t_internal  # degrees C\n\
float32   p_internal  # Pa\n\
bool      sw_1        # on/off\n\
bool      sw_2        # on/off\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::bluerov::Health_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bluerov::Health_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.cpu_used);
      stream.next(m.mem_used);
      stream.next(m.v_batt);
      stream.next(m.i_batt);
      stream.next(m.t_internal);
      stream.next(m.p_internal);
      stream.next(m.sw_1);
      stream.next(m.sw_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Health_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bluerov::Health_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bluerov::Health_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "cpu_used: ";
    Printer<float>::stream(s, indent + "  ", v.cpu_used);
    s << indent << "mem_used: ";
    Printer<float>::stream(s, indent + "  ", v.mem_used);
    s << indent << "v_batt: ";
    Printer<float>::stream(s, indent + "  ", v.v_batt);
    s << indent << "i_batt: ";
    Printer<float>::stream(s, indent + "  ", v.i_batt);
    s << indent << "t_internal: ";
    Printer<float>::stream(s, indent + "  ", v.t_internal);
    s << indent << "p_internal: ";
    Printer<float>::stream(s, indent + "  ", v.p_internal);
    s << indent << "sw_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sw_1);
    s << indent << "sw_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sw_2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BLUEROV_MESSAGE_HEALTH_H
